/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package arduinocontroller;

/**
 *
 * @author Nick
 */
public class CommandsWindow extends javax.swing.JFrame {

    /**
     * Creates new form CommandsWindow
     */
    public CommandsWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Commands Syntax:");

        jScrollPane1.setViewportBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setText("Command List:--------------------------------------------------------------------------------\n\n//Refreshes Arduino Data Connection\n- connected\n\n//Enter a number from 0 - 100 in increments of 5 ex:[CMDSET]SetPlant1Value=35\n- [CMDSET]SetPlant1Value=\n- [CMDSET]SetPlant2Value=\n- [CMDSET]SetPlant3Value=\n- [CMDSET]SetPlant4Value=\n\n//Enter a number from 0 - 100 in increments of 5 ex:[CMDSET]SetPlant1EndPoint=35\n- [CMDSET]SetPlant1Endpoint=\n- [CMDSET]SetPlant2Endpoint=\n- [CMDSET]SetPlant3Endpoint=\n- [CMDSET]SetPlant4Endpoint=\n\n//Enables or Disables the plant args: 1 = Enabled. 0 = Disabled  ex: nt1Enabled=1\n- [CMDSET]isPlant1Enabled=\n- [CMDSET]isPlant2Enabled=\n- [CMDSET]isPlant3Enabled=\n- [CMDSET]isPlant4Enabled=\n\n//Manual Control Commands will not be implemented do to fail safe concirns.\n\nNotes: -----------------------------------------------------------------------------------------\n- Plant Setpoint must be set below Plant Endpoint. The system will water the plant once the moisture content\ndrops below the Setpoint and will stop watering the plant once the moisture content reaches the Endpoint. Setting\nthe Setpoint to 0 will prevent the plant from being watered.\n\n- If the data being recieved from the Arduino seems out of Sync or not fully loaded on startup, you can type \n\"connected\" into the console to Re-Sync the settings. You may also go to File>Re-Sync Arduino to do this.\n\n- All commands listed above are CASE sensitive. Improper command formatting will yeild no results.\n\n- There is NOTHING stoping the system from watering constantly. Your points must be set correctly for the \nsystem to stop watering the plants. Upon first use, it is reccomended to closely monitor your plants to avoid \nflooding. Keep your Arduino in a water tight container away from the pump to avoid damaging your board from flooding\nif flooding may occur.\n\nSetpoint SET and Endpoint SET procedure:----------------------------------------------\n- Water your plant manually for the first time. Install your Arduino setup leaving all plants disabled.\nOnce your plant is watered to your desired moisture content. Take note of the moisture reading on the display.\nThis moisture reading on the display will be your Endpoint. (Point when watering ends) \nWait until the plant needs watering and take note of the moisture content. That moisture content is your Setpoint. After you\nset the Setpoint and the Endpoint in the control panel, Enable your plant, the system will start watering your plants.\n\nSeting up your watering system's sensors:-----------------------------------------------\n- On the sensor, there is a white line. This white line indicates your depth limit. If you push the sensor into the\nsoil past that mark, your sensor will not read correctly. It is important that the top of the sensor (Circuitry)\ndoes not get wet during the watering process. If so, the sensor will read 100% until dry. There are several solutions for\npreventing your sensors from getting wet (Anything above the white line). One of those solutions would be to use\nclear nailpolish (Not Recommended). This acts as a moisture barrier. Properly (Preferrably) You should consider purchasing\na PCB sealer for a proper and reliable seal.\n\nManual Control Operation:------------------------------------------------------------------\n- The Manual Control window allows the user to control components individually. Note that the software will not allow the\nuser to enable the pump without first enabling (One) or more solenoids. While Manual Control is enabled, Regular operation\nof the device is paused. Once disabled, the device will resume normal (Auto Watering) operation. In this window. You will \nsee two buttons that are not related to conponents on the board. These buttons are \"STOP\" and \"E Stop Reset\" For more \ninformation regarding these controls, See \"EStop Functions\" below.\n\nEStop Functions:------------------------------------------------------------------------------\n- Integrated into the system is an Emergency Stop function. This can be used as a fail safe to quickly and promptly stop \nall actions the board can perform in the event of a runaway pump. Enabling Manual Control has the same effect as pressing \nthe EStop button how ever, The EStop button has a far higher priority than enabling Manual Control. EStop completely cut's \noff operation of any functions the board can perform from the root of the device. EStop will not damage the device in any way.\nIn the event of any actions within Manual Control or standard operation that seem \"Frozen\" or \"Stuck\" Enabling EStop and Reset\nwill restore functionallity to the device. As of now, There are no pump Timeouts that disable the pump if it has been running\ntoo long. Doing this will consume more resources than the board is optimized for. That feature is being considered for implementation\nin the future.\n\nPlant To Board Mapping:---------------------------------------------------------------------\nA0: Plant 1\nA1: Plant 2\nA2: Plant 3\nA3: Plant 4");
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1098, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CommandsWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CommandsWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CommandsWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CommandsWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CommandsWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
